<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://littlebuzi.github.io/</id>
    <title>buzi</title>
    <updated>2019-12-09T09:45:18.858Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://littlebuzi.github.io/"/>
    <link rel="self" href="https://littlebuzi.github.io//atom.xml"/>
    <subtitle>德丽莎世界第一可爱</subtitle>
    <logo>https://littlebuzi.github.io//images/avatar.png</logo>
    <icon>https://littlebuzi.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, buzi</rights>
    <entry>
        <title type="html"><![CDATA[Tensorflow]]></title>
        <id>https://littlebuzi.github.io//post/tensorflow1</id>
        <link href="https://littlebuzi.github.io//post/tensorflow1">
        </link>
        <updated>2019-11-13T07:10:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="tensorflow是什么">Tensorflow是什么？</h1>
<p>Google的开源软件库：</p>
<ul>
<li>采取数据流，用于数值计算。</li>
<li>支持多种平台 —— GPU、CPU、移动设备。（方便的无缝切换，不用更改大部分的代码）</li>
<li>最初用于深度学习，变得越来越通用。（tensorflow并不只是适用于深度学习，大部分还是深度学习，只要是能抽象为数据流图的问题，都能使用它来解决）</li>
</ul>
<br>
<hr>
<br>
<h2 id="数据流图">数据流图：</h2>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/1573563675094.png" alt=""></figure>
<ul>
<li><big><strong>节点 —— 处理数据</strong></big><br>
对数据进行计算，每个框框（方形，圆形）都表示一个节点。<br>
<br></li>
<li><big><strong>线 —— 节点输入输出的关系</strong></big><br>
节点与节点之间的数据依赖。（如偏最上面的三个绿色节点，Cross Entropy 依赖 Softmax 和Cross Labels 的输出，通过计算得出新的值，如果前两个节点没有计算完，后面的节点是无法计算的。）<br>
<br></li>
<li><big><strong>线上运输张量（tensor）</strong></big><br>
线上运输的数据，所有的n维构成了数据的集合，0维数据 ——&gt; 数字，1维数据 ——&gt; 向量，二维<br>
——&gt; 矩阵，大于等于3维的数据 ——&gt; 高位矩阵。<br>
让tensor（张量）在数据流图中flow（流动）——&gt;tensorflow<br>
<br></li>
<li><big><strong>节点被分配到各种计算设备上运行</strong></big></li>
</ul>
<br>
<hr>
<br>
<h2 id="特性">特性：</h2>
<ul>
<li><big><strong>高度的灵活性</strong></big><br>
可以表示为数据流图的都可使用，主要同于神经网络，卷积等都使用了封装。也可写自己的封装，就像panda函数那样。<br>
<br></li>
<li><big><strong>真正的可移植性</strong></big><br>
可在很多设备上执行，如 CPU、GPU、移动设备。你在电脑里训练了一个model，可部署在服务器上，手机上，Docker上。<br>
<br></li>
<li><big><strong>多语言支持</strong></big><br>
python、c++、java、R、javascript<br>
<br></li>
<li><big><strong>产品和科研结合</strong></big><br>
<br></li>
<li><big><strong>自动求微分</strong></big><br>
<br></li>
<li><big><strong>性能最优化</strong></big></li>
</ul>
<br>
<hr>
<br>
<h1 id="tf10-架构">TF1.0 — 架构：</h1>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/1573633217023.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="tf20-架构">TF2.0 — 架构：</h1>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/1573633662430.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="tf20-简化的模型开发流程">TF2.0 — 简化的模型开发流程：</h1>
<ul>
<li><big><strong>使用 tf.data 加载数据</strong></big><br>
<br></li>
<li><big><strong>使用 tf.keras 构建模型，也可以使用 premade estimator 来验证模型</strong></big><br>
<br></li>
<li><big><strong>使用 tensorflow hub 进行迁移学习</strong></big><br>
<br></li>
<li><big><strong>使用 eager mode 进行运行和调试</strong></big><br>
<br></li>
<li><big><strong>使用分发策略来进行分布式训练</strong></big><br>
<br></li>
<li><big><strong>导出到 SavedModel</strong></big><br>
<br></li>
<li><big><strong>使用 Tensorflow Serve、Tensorflow Lite、Tensorflow.js 部署模型</strong></big></li>
</ul>
<br>
<hr>
<br>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于 tensorflow 的动漫人物识别]]></title>
        <id>https://littlebuzi.github.io//post/face_1</id>
        <link href="https://littlebuzi.github.io//post/face_1">
        </link>
        <updated>2019-10-25T06:26:30.000Z</updated>
        <content type="html"><![CDATA[<hr>
<blockquote>
<ul>
<li>总目标：实现动漫人脸识别、建立动漫人脸数据库</li>
<li>遇到问题❓/错误❌，请查看文末或文章间隙</li>
</ul>
</blockquote>
<hr>
<br>
<h2 id="1-标注图片中动漫人物的脸部目标">1、标注图片中动漫人物的脸部(目标)</h2>
<p>环境：<br>
服务器：腾讯云（新用户优惠，阿里云之前使用了）<br>
操作系统：CetenOS 6.5 (环境配置复杂度: Window &gt; Centos &gt; Ubuntu 因个人原因使用centos较多)<br>
python版本：3.5（自带2.6.6）<br>
window端（客户端）工具：Xshell、Xftp</p>
<hr>
<br>
<h2 id="11-依赖下载">1.1、依赖下载：</h2>
<p>① 动漫人脸分类器下载：</p>
<p>https://github.com/nagadomi/lbpcascade_animeface/</p>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/1573551561230.png" alt=""></figure>
<p>② i2v库的安装：</p>
<p>Github：https://github.com/rezoo/illustration2vec/</p>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/1573048673712.png" alt=""></figure>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/1573051147771.png" alt=""></figure>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/1573051210275.png" alt=""></figure>
<hr>
<br>
<h2 id="12-test环境">1.2、Test环境：</h2>
<p>准备下linux服务器主机(centos)属性、环境：</p>
<ul>
<li>
<p>1.<a href="https://jingyan.baidu.com/article/fdbd4277b16d1cb89e3f48e4.html">查看linux系统CPU和内存命令</a></p>
</li>
<li>
<p>2.python -V</p>
</li>
<li>
<p>3.安装anaconda（推荐安装中等较新版本，尽量避免未知错误）/ 安装pip（可能后续会出问题）<br>
<a href="https://blog.csdn.net/jh0218/article/details/85097061">CentOS 7安装Anaconda3</a></p>
</li>
<li>
<p>4.import cv2</p>
</li>
</ul>
<blockquote>
<p>可能会遇到anaconda崩了，涉及python多重版本conda软链接指向出了问题等：</p>
<ul>
<li><a href="https://blog.csdn.net/hubinbinheda/article/details/81175263">修改软链接</a></li>
<li><a href="https://codeday.me/bug/20190219/660678.html">修改.bashrc</a></li>
<li><a href="https://blog.csdn.net/qian2213762498/article/details/87385193">重新安装anaconda</a></li>
<li>或者使用了<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a>或其他源的旧版本，或<a href="https://www.anaconda.com/distribution/">官方版</a>的最新，尝试anaconda版本回退一点点</li>
</ul>
</blockquote>
<hr>
<br>
<h2 id="13-参数查询-环境调试结束开始测试功能">1.3、参数查询、环境调试结束，开始测试功能：</h2>
<p>文件目录：<br>
<img src="https://littlebuzi.github.io//post-images/1573551285992.png" alt=""></p>
<p>动漫人脸检测并截取：<br>
(尝试进行从一张图片中识别并截取人脸进行保存的操作)</p>
<pre><code class="language-python">
#coding=utf-8
import cv2
import sys
import os.path

cascade = cv2.CascadeClassifier('/root/comic/lbpcascade_animeface.xml')  # 引入xml
image = cv2.imread('/root/comic/test.jpg', cv2.IMREAD_COLOR)  # 读入一幅彩色图片
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # 色彩空间转换
gray = cv2.equalizeHist(gray)  # 图像直方图均衡化

faces = cascade.detectMultiScale(gray,
                                 # detector options
                                 scaleFactor=1.1,
                                 minNeighbors=5,
                                 minSize=(24, 24))

i = 0
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)

    face = image[y: y + h, x:x + w, :]
    face = cv2.resize(face, (96, 96))
    save_filename = '%s_%d.png' % (os.path.basename('/root/comic/faces/').split('.')[0], i)
    cv2.imwrite(&quot;/root/comic/faces/&quot; + save_filename, face)
    i = i + 1

#cv2.imshow(&quot;AnimeFaceDetect&quot;, image)
cv2.waitKey(0)
cv2.imwrite(&quot;/root/comic/out.png&quot;, image)


</code></pre>
<h2 id="br"><br></h2>
<h2 id="2-截取并保存视频一帧帧截取到的动漫人脸目标">2、截取并保存视频一帧帧截取到的动漫人脸(目标)：</h2>
<br>
<h2 id="21-文件目录">2.1、文件目录：</h2>
<figure data-type="image" tabindex="5"><img src="https://littlebuzi.github.io//post-images/1573556199362.png" alt=""></figure>
<h2 id="22-导入视频一帧帧截取动漫人脸">2.2、导入视频一帧帧截取动漫人脸：</h2>
<pre><code class="language-python">
#coding=utf-8
import cv2
import os

face_id = 1
count = 0
cap = cv2.VideoCapture('/root/comic/1.mp4')
face_detector = cv2.CascadeClassifier('/root/comic/lbpcascade_animeface.xml')

while True:

    # 从摄像头读取图片
    sucess, img = cap.read()
    # 转为灰度图片
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # 检测人脸
    faces = face_detector.detectMultiScale(gray, 1.3, 5)
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x+w, y+w), (255, 0, 0))
        count += 1
        font = cv2.FONT_HERSHEY_TRIPLEX
        cv2.putText(img, 'num:%d' % (count), (x + 30, y + 30), font, 1, (255, 0, 255), 4)
        # 保存图像
        cv2.imwrite(&quot;/root/comic/characters/User.&quot; + str(face_id) + '.' + str(count) + '.jpg', gray[y: y + h, x: x + w])
        #cv2.imshow('image', img)
    # 保持画面的持续。
    k = cv2.waitKey(1)

    if k == 27:   # 通过esc键退出摄像
        break

# 关闭摄像头
cap.release()
cv2.destroyAllWindows()

</code></pre>
<hr>
<br>
<h2 id="22-分类图片">2.2、分类图片：</h2>
<p>将不同人物分类到属于他命名的文件夹下：</p>
<pre><code class="language-python">
#开发中

</code></pre>
<hr>
<br>
<h2 id="3-训练图片">3、训练图片：</h2>
<p>开始制定、训练出模型(代码太长影响观感,完整代码<a href="https://github.com/littlebuzi/">github</a>)：</p>
<pre><code class="language-python">
#coding=utf-8
from skimage import io, transform
import glob
import os
import tensorflow as tf
import numpy as np
import time
import matplotlib.pyplot as plt

# 训练验证数据集目录
path = '/root/comic_reg/data/train-validation-set/'#最后少了个斜杠 读入失败
# 模型保存地址，最后接的是模型名字
model_path = '/root/comic_reg/model/model.ckpt'

# 将所有的图片resize成100*100

# 读取图片

# 打乱顺序

# 将所有数据分为训练集和验证集
ratio = 0.7
s = np.int(num_example*ratio)
x_train = data[:s]
y_train = label[:s]
x_val = data[s:]
y_val = label[s:]

# -----------------构建网络----------------------
# 占位符
x = tf.placeholder(tf.float32, shape=[None, w, h, c], name='x')
y_ = tf.placeholder(tf.int32, shape=[None, ], name='y_')

# 第一个卷积层（100——&gt;50)

# 第二个卷积层(50-&gt;25)

# 第三个卷积层(25-&gt;12)

# 第四个卷积层(12-&gt;6)

# 全连接层

# ---------------------------网络结束---------------------------

# (小处理)将logits乘以1赋值给logits_eval，定义name，方便在后续调用模型时通过tensor名字调用输出tensor

# 定义一个函数，按批次取数据

# 训练和测试数据，可将n_epoch设置更大一些
n_epoch = 50
batch_size = 32
saver = tf.train.Saver()
sess = tf.Session()
sess.run(tf.global_variables_initializer())

# 自定义保存数据列表
trainlosslist = []
trainacclist = []
validationlosslist = []
validationacclist = []


for epoch in range(n_epoch):
    start_time = time.time()
    
    # training
    train_loss, train_acc, n_batch = 0, 0, 0
    for x_train_a, y_train_a in minibatches(x_train, y_train, batch_size, shuffle=True):
        _, err, ac = sess.run([train_op,loss,acc], feed_dict={x: x_train_a, y_: y_train_a})
        train_loss += err; train_acc += ac; n_batch += 1
    print(&quot;   train loss: %f&quot; % (train_loss / n_batch))
    print(&quot;   train acc: %f&quot; % (train_acc / n_batch))
    # 添加到列表
    trainlosslist.append(train_loss / n_batch)
    trainacclist.append(train_acc / n_batch)

    # validation
    val_loss, val_acc, n_batch = 0, 0, 0
    for x_val_a, y_val_a in minibatches(x_val, y_val, batch_size, shuffle=False):
        err, ac = sess.run([loss, acc], feed_dict={x: x_val_a, y_: y_val_a})
        val_loss += err; val_acc += ac; n_batch += 1
    print(&quot;   validation loss: %f&quot; % (val_loss / n_batch))
    print(&quot;   validation acc: %f&quot; % (val_acc / n_batch))
    # 添加到列表
    validationlosslist.append(val_loss / n_batch)
    validationacclist.append(val_acc / n_batch)

saver.save(sess,model_path)
sess.close()

# 绘图
x = np.arange(1, n_epoch, 1)

plt.plot(x, np.array(trainacclist)[x-1], label=&quot;train-acc&quot;)
plt.plot(x, np.array(validationacclist)[x-1], label=&quot;validation-acc&quot;)
plt.plot(x, np.array(trainlosslist)[x-1], label=&quot;train-loss&quot;)
plt.plot(x, np.array(validationlosslist)[x-1], label=&quot;validation-loss&quot;)

# 设置坐标轴名称
plt.xlabel('epoch')

# 画两条基准线
plt.plot(x, x/x, label=&quot;one&quot;)
plt.plot(x, x-x, label=&quot;zero&quot;)

# 参数：loc设置显示的位置，0是自适应；ncol设置显示的列数
plt.legend(loc=0, ncol=1)   
#plt.show()
plt.savefig(&quot;/root/comic_reg/out.png&quot;)

</code></pre>
<hr>
<br>
<h2 id="4-识别图片">4、识别图片：</h2>
<pre><code class="language-python">
from skimage import io,transform
import tensorflow as tf
import numpy as np
import glob

path = '/root/comic_reg/data/test-set/*.png'

image_dict = {0: '一花',1:'二乃',2:'三玖',3:'四叶',4:'五月'}
count_true=[]

w=100
h=100
c=3

def read_one_image(path):
    img = io.imread(path)
    img = transform.resize(img,(w,h))
    return np.asarray(img)

with tf.Session() as sess:
    data = []
  
    # 目录列表
    paths = glob.glob(path)
    #print(paths)
    for img in paths:
        data.append(read_one_image(img))

    saver = tf.train.import_meta_graph('/root/comic_reg/model/model.ckpt.meta')
    saver.restore(sess,tf.train.latest_checkpoint('/root/comic_reg/model/'))

    graph = tf.get_default_graph()
    x = graph.get_tensor_by_name(&quot;x:0&quot;)
    feed_dict = {x:data}

    logits = graph.get_tensor_by_name(&quot;logits_eval:0&quot;)

    classification_result = sess.run(logits,feed_dict)
    

    #打印出预测矩阵
    print(&quot;\n预测矩阵:\n&quot;, classification_result)
    #打印出预测矩阵每一行最大值的索引
    print(&quot;\n简略结果:\n&quot;, tf.argmax(classification_result,1).eval(), '\n')
    print(&quot;具体情况: &quot;)
    #根据索引通过字典对应人物的分类
    output = []
    output = tf.argmax(classification_result,1).eval()
    count = 0
    for i in range(len(output)):
        # output[i]是测试结果编码，paths[i])[-7]是原定图片编号（路飞1）
        flag = False
        if str(output[i]+1) == paths[i][-7]:
            flag = True
            if flag == True:
                count_true.append(paths[i][-7:])
            count += 1
        print(&quot;第 &quot; + str(i+1) +  &quot; 张 (&quot; +   paths[i][-7:] + &quot;) 人物预测: &quot; + image_dict[output[i]]  + &quot; &quot; + str(flag))
    print(&quot;\n准确率: {:.2f}%&quot;.format(count / len(output) * 100 ))

print(count_true)



</code></pre>
<hr>
<br>
<p>结果：<br>
<img src="https://littlebuzi.github.io//post-images/1575866273011.png" alt=""><br>
因为只有第一个人物图片准备充足所以其他人物识别率会偏低</p>
<hr>
<br>
<p>之前使用：</p>
<p>服务器：腾讯云<br>
操作系统：Ubuntu Server 18.04.1 LTS 64位<br>
类型：公共镜像（池）<br>
内存：2 GB<br>
CPU：1 核<br>
硬盘：50 G<br>
公网带宽：1 Mbps</p>
<hr>
<br>
<h2 id="步骤11中可能遇到的问题">步骤1.1中可能遇到的问题：</h2>
<h1 id="1下载速度太慢">1.下载速度太慢：</h1>
<br>
<h2 id="法一">法一：</h2>
<p>liunx 下载 Github_Releases 下载提速：</p>
<p>Linux系统下hosts文件的位置是 /etc/hosts ，以root用户登录Linux，使用vi编辑/etc/hosts文件，将附加的内容添加在其后面即可：</p>
<p>修改hosts(liunx):<br>
52.216.186.155 github-production-release-asset-2e65be.s3.amazonaws.com</p>
<figure data-type="image" tabindex="6"><img src="https://littlebuzi.github.io//post-images/1573051669990.png" alt=""></figure>
<pre><code class="language-linux">
wget https://github.com/rezoo/illustration2vec/releases/download/v2.0.0/illust2vec_tag_ver200.caffemodel

以此类推...

</code></pre>
<h2 id="法二">法二：</h2>
<h3 id="修改hostswindow">修改hosts(window):</h3>
<p>当我们需要本地调试网站或者屏蔽某个网站的时候可以手动将这个网站添加到系统hosts文件中，因为hosts文件的优先级高于DNS，所以可以达到你想要在浏览器里呈现的结果，当然这只在本地有用！<br>
一、Windows中hosts文件一般在C:\Windows\System32\drivers\etc目录下，格式是</p>
<pre><code>127.0.0.1 localhost
::1 localhost
52.216.186.155 github-production-release-asset-2e65be.s3.amazonaws.com
</code></pre>
<p>可以用记事本修改，前面是IP地址，后面是域名。127.0.0.1这个是本地环回地址。<br>
比如127.0.0.1 www.baidu.com就是把www.baidu.com这个域名指向127.0.0.1的地址。</p>
<h3 id="xftp传上去云端">xftp传上去云端</h3>
<p>当然这也需要很久 不多折合下来很大可能快50-100倍。如果像我一样有一台window云服务，那就让它来做这件事。下载，上传，都在云上进行。</p>
<h3 id="详细请看">详细请看</h3>
<p><a href="https://www.cmsky.com/linux-hosts/">https://www.cmsky.com/linux-hosts/</a></p>
<hr>
<br>
<h2 id="步骤22中可能遇到的问题">步骤2.2中可能遇到的问题：</h2>
<pre><code>
【Linux】 解决报错： 
ImportError: libSM.so.6: cannot open shared object file: No such file or directory

原因：
libSM、libSM等不存在

解决办法：
yum install xxx

详：https://www.cnblogs.com/richerdyoung/p/8458910.html

</code></pre>
<hr>
<br>
<h2 id="步骤23中可能遇到的问题">步骤2.3中可能遇到的问题：</h2>
<p>查看linux系统CPU和内存命令</p>
<p>https://jingyan.baidu.com/article/fdbd4277b16d1cb89e3f48e4.html</p>
<p>Python MemoryError</p>
<p>https://blog.csdn.net/xiaopihaierletian/article/details/57416110</p>
<p>在用Python处理大数据时，本来16G的内存，内存还没使用四分之一就开始报MemoryError的错误，后来才知道32bit的Python使用内存超过2G之后，就报这个错误，还没有其他的提示消息。果断换64bit的Python。</p>
<p>https://blog.csdn.net/weixin_33928137/article/details/93646975</p>
<p>https://blog.csdn.net/xovee/article/details/101077022</p>
<p>linux 使用文件增加虚拟内存 swap</p>
<p>https://msd.misuland.com/pd/3070888491219949990</p>
<p>https://www.cnblogs.com/ling-yu-amen/p/10819879.html</p>
<hr>
<br>
<p>问：博主你的代码有问题，你的项目文件夹怎么建的？<br>
答：项目还在开发中，这是俺滴毕设所以还未完善，只有个大概，望体谅<sub>谢谢大家</sub></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python二三事]]></title>
        <id>https://littlebuzi.github.io//post/pip</id>
        <link href="https://littlebuzi.github.io//post/pip">
        </link>
        <updated>2019-10-25T05:06:10.000Z</updated>
        <content type="html"><![CDATA[<hr>
<br>
<h1 id="一-pip源地址">一、pip源（地址）：</h1>
<br>
<pre><code>（1）阿里云 : http://mirrors.aliyun.com/pypi/simple/
（2）豆瓣 : http://pypi.douban.com/simple/
（3）清华大学 : https://pypi.tuna.tsinghua.edu.cn/simple/
（4）中国科学技术大学 : http://pypi.mirrors.ustc.edu.cn/simple/
（5）华中科技大学 : http://pypi.hustunique.com/
</code></pre>
<br>
<h2 id="1普通使用">1.普通使用：</h2>
<br>
<pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas
</code></pre>
<blockquote>
<p>pip_install_-i_源的地址_包/库名<br>
'_'符号代表空格</p>
</blockquote>
<br>
<h2 id="2清华源使用介绍">2.<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华源使用介绍：</a></h2>
<br>
<p>pypi 镜像使用帮助<br>
pypi 镜像每 5 分钟同步一次。</p>
<p>临时使用</p>
<pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
</code></pre>
<p>注意，simple 不能少, 是 https 而不是 http<br>
设为默认<br>
升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</p>
<pre><code>pip install pip -U
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p>如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：</p>
<pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
</code></pre>
<br>
<h2 id="3关于一键修改源-linux">3.<a href="https://blog.csdn.net/sinat_21591675/article/details/82770360">关于一键修改源、Linux</a></h2>
<br>
<hr>
<br>
<h1 id="二-anacondaconda-切换为国内源">二、anaconda/conda 切换为国内源</h1>
<br>
<h2 id="windows下">windows下</h2>
<p>在清华源和中科大源之间自行选择</p>
<p>添加清华源<br>
命令行中直接使用以下命令</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge 
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
</code></pre>
<h3 id="设置搜索时显示通道地址">设置搜索时显示通道地址</h3>
<pre><code>conda config --set show_channel_urls yes
</code></pre>
<p>注意如果需要pytorch, 还需要添加pytorch的镜像</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
</code></pre>
<p>添加中科大源</p>
<pre><code>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config --set show_channel_urls yes
</code></pre>
<br>
<h2 id="linux下">Linux下</h2>
<p>将以上配置文件写在~/.condarc中</p>
<blockquote>
<p>vim ~/.condarc</p>
</blockquote>
<pre><code>channels:
 - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
 - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
 - defaults
show_channel_urls: true
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安卓入门-目录结构【Android Studio】]]></title>
        <id>https://littlebuzi.github.io//post/android</id>
        <link href="https://littlebuzi.github.io//post/android">
        </link>
        <updated>2019-10-21T13:11:33.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012943383.png" alt=""></figure>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012947432.png" alt=""></figure>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012951207.png" alt=""></figure>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012955595.png" alt=""></figure>
<figure data-type="image" tabindex="5"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012959717.png" alt=""></figure>
<figure data-type="image" tabindex="6"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012966111.png" alt=""></figure>
<figure data-type="image" tabindex="7"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012970580.png" alt=""></figure>
<figure data-type="image" tabindex="8"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012974967.png" alt=""></figure>
<figure data-type="image" tabindex="9"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/android1/android1/1568012978151.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub]]></title>
        <id>https://littlebuzi.github.io//post/github_learn</id>
        <link href="https://littlebuzi.github.io//post/github_learn">
        </link>
        <updated>2019-10-21T12:52:00.000Z</updated>
        <content type="html"><![CDATA[<p>你所使用的很多开源程序都是在Github上</p>
<p>从较高的层面来说，GitHub是一个基于网站和云的服务，可以帮助开发人员存储和管理他们的代码，以及跟踪和控制对代码的更改。要准确理解GitHub是什么，您需要了解两个相关原则：</p>
<ul>
<li>版本控制</li>
<li>Git</li>
</ul>
<p>在本文中，我们将首先解释这两个原则。然后，我们将深入研究GitHub，以及如何使用GitHub与WordPress一起工作。</p>
<h1 id="版本控制">版本控制</h1>
<p>版本控制可帮助开发人员跟踪和管理软件项目代码的更改。随着软件项目的发展，版本控制变得至关重要。以WordPress为例……</p>
<p>在这一点上，WordPress是一个非常大的项目。如果核心开发人员想要在WordPress代码库的某个特定部分上工作，那么让他们直接编辑“官方”源代码是不安全或有效的。</p>
<p>相反，版本控制允许开发人员安全地完成分支和合并。</p>
<p>通过分支，开发人员复制部分源代码（称为存储库）。然后，开发人员可以安全地更改代码的这一部分，而不会影响项目的其余部分。</p>
<p>然后，一旦开发人员使他或她的部分代码正常工作，他或她就可以将该代码合并回主要源代码以使其正式化。</p>
<p>然后跟踪所有这些更改，并在需要时可以还原。</p>
<h1 id="git">Git</h1>
<p>Git是Linus Torvalds于2005年创建的一个特定的开源版本控制系统。</p>
<p>具体来说，Git是一个分布式版本控制系统，这意味着每个开发人员的计算机上都可以使用整个代码库和历史记录，这样可以轻松进行分支和合并。</p>
<p>根据Stack Overflow开发人员调查，超过87％的开发人员使用Git。</p>
<h1 id="github">GitHub</h1>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/2019/07/30/tools/github/1564578523654.png" alt=""></figure>
<p>GitHub是一家营利性公司，提供基于云的Git存储库托管服务。从本质上讲，它使个人和团队更容易使用Git进行版本控制和协作。</p>
<p>GitHub的界面足够用户友好，所以即使是新手编程也可以利用Git。如果没有GitHub，使用Git通常需要更多娴熟技术并使用命令行。</p>
<p>GitHub是如此用户友好，有些人甚至使用GitHub来管理其他类型的项目 - 比如写书。</p>
<p>此外，任何人都可以免费注册和托管公共代码存储库，这使得GitHub特别受开源项目的欢迎。</p>
<p>作为一家公司，GitHub通过销售托管私有代码存储库以及其他以业务为中心的计划来赚钱，这些计划使组织更容易管理团队成员和安全性。</p>
<h1 id="探索github接口">探索GitHub接口</h1>
<p>为了让您基本了解GitHub接口的外观，这里是GitHub存储库中托管的WordPress源代码：</p>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/2019/07/30/tools/github/1564578596787.png" alt=""></figure>
<p>从这里，您可以查看正在处理的各个分支，以及有人进行提交时（这有点像“保存”文件）。根据存储库的设置方式，您也可以创建自己的分支并在那里进行自己的提交。</p>
<p>一旦进行了一些更改，您就可以通过发出拉取请求将该代码提交回分支。拉取请求基本上是要求分支机构的负责人包含您的代码。它还可以帮助那个人准确地看到你在代码中改变了什么。</p>
<p>如果你想更长久地在你自己的帐户上编辑部分或全部WordPress源代码，你也可以通过单击Fork按钮来叉它（叉子在概念上类似于分支，但是fork更永久）：</p>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/2019/07/30/tools/github/1564468237222.jpg" alt=""></figure>
<h1 id="使用git和github与wordpress">使用Git和GitHub与WordPress</h1>
<p>许多WordPress主题和插件开发人员在GitHub上托管他们项目的源代码。例如，您可以查看Elementor页面构建器代码，Zerif Lite主题源代码等等。</p>
<p>但也有WordPress插件可以帮助您更直接地使用Git和WordPress。</p>
<p>例如，VersionPress旨在将Git的强大功能引入常规的WordPress操作，例如更新帖子或安装插件。VersionPress为您的WordPress文件和数据库添加版本控制。</p>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/2019/07/30/tools/github/1564468247943.jpg" alt=""></figure>
<p>WP Pusher是另一个基于Git的插件，可让您直接从GitHub将主题和插件部署到WordPress网站。</p>
<h1 id="开始使用github">开始使用GitHub</h1>
<p>要开始使用GitHub：</p>
<p>注册一个免费的GitHub帐户<br>
按照GitHub Hello World指南了解您可能想要采取的最受欢迎的操作。</p>
<p>官网地址：<a href="https://github.com/">https://github.com/</a></p>
<h1 id="如何加快github下载速度">如何加快github下载速度</h1>
<p>https://blog.csdn.net/mist99/article/details/80602090</p>
<p>52.216.186.155 github-production-release-asset-2e65be.s3.amazonaws.com<br>
service network restart</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于opencv的人脸识别签到系统 ]]></title>
        <id>https://littlebuzi.github.io//post/face</id>
        <link href="https://littlebuzi.github.io//post/face">
        </link>
        <updated>2019-10-21T12:26:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>学校小学期项目：人脸识别签到系统</p>
</blockquote>
<br>
<hr>
<br>
<h1 id="一-需求和计划">一、需求和计划：</h1>
<br>
<p>随着高科技的蓬勃发展，人体特征分析技术已经作为身份快速识别及视频监控等领域的最新增值点与应用点，在身份识别、智能安防、智能监控、出入管理、证卡认证等方面发挥巨大作用。面部检测识别技术，是利用计算机图像分析、模型理论、人工智能及模式识别技术的非接触性高端模式识别技术，其可完成从复杂的图像场景中检测、检出特征人像信息，并进行匹配识别的智能分析过程。<br>
软件的发展给我们的经济带来了很大的推动作用，现在越来越多的软件技术运用于各行各业，市场经济作为经济发展的一部分，推行新的技术对其有很大的帮助作用，而人类面部识别智能化的应用，为工作及生产带来很大便利，提高了效益。比如日常工作中的面部考勤签到，vip客户面部识别，来访人员面部识别等，这些系统的应用为行业及单位带来了很大的收益，因此随着技术的进步，跟上时代的步伐显得尤为重要。</p>
<br>
<hr>
<br>
<h1 id="二-项目设计">二、项目设计：</h1>
<br>
<p>1、 人员脸部信息采集</p>
<p>在学校集中进行学生和教师的人脸信息采集（现阶段），证件、部门、职务等信息登记（以后）。</p>
<p>2、 人员基础信息管理</p>
<p>在系统中基础信息管理需要管理工作人员的基本资料：包括面部信息、证件号、部门（暂未）等,可以以不同参数为索引百行排列、查询，并可以生成工作人员信息报表。</p>
<p>3、 IP摄像机终端管理（目标）</p>
<p>在系统中，可以对前端IP摄像机进行远程管理，比如修改IP地址，修改设备编号及开启采集与识别功能。</p>
<p>4、 系统扩展接口（目标）</p>
<p>系统提供与企事业单位内其他业务系统的开发接口，实现面部识别考勤系统与其他业务系统的结合使用，方便生产场所的业务管理，提高工作效率。</p>
<p>5、 查询统计报表</p>
<p>系统可以对工作人员的考勤信息进行查询统计，并生成相应工作报表，为单位进一步提供有针对性的工作考勤管理提供信息决策支持。</p>
<p>7、系统设置</p>
<p>实现系统的使用用户及权限信息管理，实现系统参数设定管理。</p>
<blockquote>
<p>使用的库 ：<br>
1.opencv（人脸识别）：<br>
（内置）算法，摄像头，引用xml。<br>
2.tkinter（图形界面）：<br>
图形化界面，（简单按钮事件）链接各py文件，业务逻辑。</p>
</blockquote>
<p>（内置）算法，摄像头，引用xml<br>
Tkinter：<br>
图形化界面，（简单按钮事件）链接各py文件，业务逻辑</p>
<p>界面：</p>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568803408485.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="三-项目实现过程">三、项目实现过程：</h1>
<br>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568803348963.png" alt=""></figure>
<br>
<p>人脸检测：</p>
<p>使用OpenCV的人脸检测器进行人脸的初步检测，使haarcascade_frontalface_default.xml训练进行人脸的二分类判定，完成人脸检测。换调用摄像头：“cv2.VideoCapture(1)”，使用Python+OpenCV进行视频中的人脸检测，人脸关键点定位：关键点定位的目标是在确知人脸位置的基础上，精确定位面部的关键点，如下图示意：</p>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568803533749.png" alt=""></figure>
<p>图像采集：<br>
采集1000张图片，转换为灰度图并报错，以自己设定好的规律命名图片文件，易于之后的读取后训练。</p>
<p>获得面部关键点的目的是进行人脸的对齐和标准化。标准化的人脸输入可以获得更高的人脸识别精度。</p>
<p>图像特征采集：<br>
人脸特征提取是根据上述标准化的人脸区域图块，提取出数字化的特征。即完成从RGB信息到数值特征的变换。此环节需要尽量使得同一个人物的不同人脸所提取到的特征尽可能相似，而不同人物的人脸所提取的特征尽可能相异。</p>
<p>模型的训练：</p>
<p>人脸识别的模型的训练采用LBPH算法：</p>
<p>cv2.face.LBPHFaceRecognizer_create()</p>
<blockquote>
<p><a href="https://www.cnblogs.com/zhaoweiwei/p/LBPH.html">OpenCV人脸识别LBPH算法源码分析</a></p>
</blockquote>
<br>
<p>注册成功：</p>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568805892550.png" alt=""></figure>
<br>
<p>签到成功：</p>
<figure data-type="image" tabindex="5"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568805922061.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="四-项目总结和体会">四、项目总结和体会：</h1>
<br>
<p>要搞一个人脸识别程序，首先我们需要先用提前裁剪好的标注好的人脸照片训练一个识别器。比如说，我们的识别器需要识别两个人，一个人的id是1，而另一个的id是2，于是在数据集里面，1号人的所有照片会有id 1号，2号人同理。然后我们就会使用这些数据集照片去训练识别器，再从一个视频中识别出1号人。</p>
<p>我们把要做的事分成三部分：</p>
<p>1.创建数据集</p>
<p>2.训练</p>
<p>3.识别</p>
<p>生成数据集，写一个数据集生成脚本。Python环境，Pycharm等IDE。</p>
<p>在目录中放好haarcascade_frontalface_default.xml 。OpenCV自带的。</p>
<p>我在github上进行了下载接下来使用cv2获取摄像头数据以及XML文件：我们的数据集需要先从摄像头采集一些人脸例子照片，当然，只能是同一个人的。然后程序会给这些例子照片添加id，并将照片保存在一个文件夹中，这个文件夹我们就将它命名为data，在py脚本的同目录下创建一个data的文件夹。</p>
<p>为了不会将不同的人脸照片弄混，我们需要定一个命名规则，用于给照片命名。例如，命名规则为User.[ID].[SampleNumber].jpg。如果是2号人的第十张照片，我们可以将它命名为User.2.10.jpg。为什么要定义这样的格式呢？因为这样，在加载照片训练的时候，我们就可以只通过照片的文件名，就能简单地判断是几号用户的人脸照片。而后取出时进行分割，拿到对应id的图片，计算特征值。通过shell输入，来获取人的id，并且初始化计算器变量来存储人们的例子数。</p>
<p>有一个值得注意的地方，gray[y : y + h, x : x + w]。此处我们是把一张灰度图片看成一个二维数组（或二维矢量），然后使用python中[]截取OpenCV检测出来的人脸区域。为了照片识别度，质量好一点，我们需要提高一下两次拍摄之间的延迟。代码会在两个拍摄间延迟100毫秒，100毫秒足够让我们去移动我们人脸的角度了（时间不够长就再加）。在拍摄1000张后停止。</p>
<p>最后释放资源：cap.release() cv2.destroyAllWindows() 识别和录取到训练其实都是差不多的业务逻辑。我们的1000张图片如果质量更好，或者说直接10000张。可能效果会好很多。</p>
<p>在算法抉择方面我们选用了1996年的LBPH算法，还有其他更多算法</p>
<p>如：</p>
<p>recognizer = cv2.face.EigenFaceRecognizer_create()<br>
recognizer = cv2.face.FisherFaceRecognizer_create()</p>
<blockquote>
<p>不同算法详细介绍：<br>
<a href="https://www.cnblogs.com/little-monkey/p/8118938.html">人脸识别算法之特征脸方法(Eigenface、FisherFace、LBPH)</a></p>
</blockquote>
<p>LBPH算法：</p>
<p>原理：通过已知条件，利用特定关系逐步递推，最终得到结果。</p>
<p>1.提取特征值并转换<br>
<img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568805324851.png" alt=""><br>
2.生成数据集，训练，生成yml文件<br>
<img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568805339521.png" alt=""><br>
3.计算（欧式）距离，输出相似度<br>
<img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568805361705.png" alt=""></p>
<br>
<hr>
<br>
<h1 id="整体代码流程">整体代码流程：</h1>
<br>
<figure data-type="image" tabindex="6"><img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568806231175.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="完整代码">完整代码：</h1>
<br>
<p><a href="https://github.com/littlebuzi/FaceRecognition">Github: littlebuzi / FaceRecognition</a><br>
<img src="https://littlebuzi.github.io//post-images/2019/08/09/python/face/1568807139089.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[疑难杂症]]></title>
        <id>https://littlebuzi.github.io//post/xp_web</id>
        <link href="https://littlebuzi.github.io//post/xp_web">
        </link>
        <updated>2019-10-21T12:21:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="xp的web之旅">xp的web之旅</h1>
<p>环境：</p>
<p>用家里的xp系统，是之前用类似“番茄花园”的整合版安装的。</p>
<p>在尝试各种wamp的版本屡屡碰壁后，试着用其他整合环境：</p>
<p>1.phpstudy</p>
<p>初次采用时，搭建z-blog感觉良好，界面也比较熟悉。</p>
<p>而后的chanzhi与lzcms都同一个错误，you don’t have permisson to aseen it ! ;可能是lzcms的静态没开，但之后开了也没反应，并不能确认是否开成功。</p>
<p>之后发现可能是之恩能够开在linux上！也可能第一次访问后，就默认了一个ip一个网站，再访问其他需要在配置文件里修改加上，但这个可能比较小，因为这违反了www的访问习惯，</p>
<p>在这个目录下，就算是不同系统，如果把他们看成其中一个的分系统，那样也说得清。</p>
<p>2.phpwamp</p>
<p>就是因为phpstudy遇到了这个情况，所以采用phpwamp，感觉这个比他跟老式，不过更加适合我的xp。</p>
<p>用着用着感觉也是和phpstudy差不多，类似于绑定访问的第一个，这次我不用lzcms，我用chanzhicms。也尝试着去改这改那，发现还是不行。</p>
<p>最后，找到了wamp2.2/2.4（之前的假wamp浪费了很多时间），php版本和apache版本也刚好到chanzhi要求。</p>
<p>所以用上了这个wamp，xp真的不容易，各种软件要兼容，在现在这个环境下。</p>
<p>计划：用wamp学tp，最初的想法就是这样，为了混乱原有的环境，想在另一台电脑，xp上弄，结果也不省心。最后可以了</p>
<br>
<hr>
<br>
<h1 id="写能执行cmd命令的bat文件">写能执行cmd命令的bat文件</h1>
<p>每次运行jar文件时，我总是需要先打开cmd窗口，再切换到我jar文件保存的盘符，再执行java -jar test.jar，虽然操作不是很复杂，但是如果直接写一个bat文件，每次使用直接双击，这种傻瓜式的方式，估计更容易被大家所喜欢并能够方便使用。</p>
<p>方式也很简单，比如：<br>
<img src="https://littlebuzi.github.io//post-images/2019/09/18/tools/cmd/20170119112532636.png" alt=""><br>
新建一个txt文本，输入如下：<br>
<img src="https://littlebuzi.github.io//post-images/2019/09/18/tools/cmd/20170119112645075.png" alt=""><br>
然后保存为bat文件即可，如果以后路径或者名称有变更的话，直接编辑修改，不用每次再去cmd中输入指令了。</p>
<p>双击即可运行test1.jar的代码啦！</p>
<p>又或者例如：</p>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/2019/09/18/tools/cmd/2019091815153653.png" alt=""></figure>
<p>更新hexo，同步缓存</p>
<blockquote>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。本文链接：https://blog.csdn.net/qq_15158911/article/details/54613948</p>
</blockquote>
<br>
<hr>
<br>
<h1 id="云计算-docker">云计算 docker</h1>
<p>参考：</p>
<p><a href="https://blog.csdn.net/qq_22211217/article/details/80414227">https://blog.csdn.net/qq_22211217/article/details/80414227</a><br>
<a href="https://blog.csdn.net/hehailiang_dream/article/details/79983229">https://blog.csdn.net/hehailiang_dream/article/details/79983229</a><br>
<a href="https://blog.csdn.net/yr12dong/article/details/80720690">https://blog.csdn.net/yr12dong/article/details/80720690</a></p>
<br>
<hr>
<br>
<h1 id="关于网络工程师">关于网络工程师</h1>
<h2 id="考纲">考纲：</h2>
<p><a href="http://www.baidu.com/link?url=EX25o0QxqfOKfsRYcQxXwmQYuljdSCAgUhmadAhCFA_FPSMKUaxJPZbJAEyxFIrp">【中国计算机技术职业资格网(软考)】</a></p>
<p>2019年官网考纲：<a href="http://www.ruankao.org.cn/platform/details?code=02_24">http://www.ruankao.org.cn/platform/details?code=02_24</a></p>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/2019/07/30/tools/net/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88.png" alt=""></figure>
<h2 id="学习资源">学习资源：</h2>
<p><a href="http://www.baidu.com/link?url=XyVSbZ5Y4dTw0p23ZJB-DSUU7JcazbywJzt1m8MuCLKtVLTwf6Tosj86cIIEWy1J">【哔哩哔哩 (゜-゜)つロ 干杯~-bilibili】</a></p>
<p>1.<a href="https://www.bilibili.com/video/av50506518?from=search&amp;seid=4496232001982375832">2019网络工程师【软考】</a></p>
<p>2.<a href="https://www.bilibili.com/video/av53851647">网络工程师考试-视频教程-希赛</a></p>
<h2 id="下载途径">下载途径：</h2>
<p>1.<a href="https://www.jijidown.com/">https://www.jijidown.com/</a></p>
<p>2.b站手机版</p>
<p>3.<a href="https://github.com/Henryhaohao/Bilibili_video_download">https://github.com/Henryhaohao/Bilibili_video_download</a></p>
<br>
<hr>
<br>
<h1 id="简易桌面-v10-总结">简易桌面 v1.0 总结</h1>
<p>项目1：简易桌面1.0</p>
<p>针对于mom使用eclipse为平台制作的第一代，简易桌面软件，目的在于用户的简易操作。</p>
<p>问题：经验总结：</p>
<p>第一：明确目的，时刻纠正方向，走走停停。</p>
<p>第二：确定方向，用图画的方式将界面描绘好，利于以后的代码翻译编写。</p>
<p>第三：在实际编程的过程中，会出现一些小改动，处于临时的灵感，就会对草稿图进行修改，想象计划与实际真的有很大的出入。真的不去实际做一做，可能你永远也不知道。</p>
<p>第四：停留知识水平，框架的基础构建，只是皮毛，经过网上的百度学习，在错误值积累经验，蹒跚学步，跌跌撞撞。做出来还是可以看的，但是技术要求方面不高。达不到要求。</p>
<p>第五：有必要进行一次完整的学习，零碎伴有一些错误的学习经历，危害甚大。一次不完整的学习经历的确可以对往后造成很大的危害。</p>
<p>第六：遇到问题方面；是灵感想法创意的来源。认识到错误，提高自己。做好笔记。</p>
<p>第七，固步自封，井底之蛙，最为致命；以上讨论的比较大概，会做更详细的分析（问题）。</p>
<p>今天导出后 在xp上准备运行 先前研究过得知 需要运行环境jre才能运行可运行jar，在win10（有jre1.8的环境中运行可以）上ok，在xp上时，显示jar直接为一个zip，考虑问题，可能是环境jre安装错误，后面才意识到要安在c盘，还要注册表注册？主要是下载来的jre1.8u151是类似安装包安装在c盘上后的文件夹效果，应该下个安装包。再来试试。正在放到xp上的感觉，xp真的很久很久。以后考虑换成win7，再来，可能会轻松点</p>
<br>
<hr>
<br>
<h1 id="简易桌面-v10-问题">简易桌面 v1.0 问题</h1>
<p>简易桌面v1.0</p>
<p>问题1:（状态：已解决）</p>
<p>解决：用new Enter（）的方法，比没有想象中的跳转画面，但是衍生出new后，布局排版乱了，按钮飞到最上面，经过移植斗地主的布局代码，经过调试修改，成功解决，ojbk）</p>
<p>问题：以new Enter（）；的形式切换应用节目缺点，画面会跳一下，影响观感，使用体验。</p>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/java_gui_1/1567333784141.png" alt=""></figure>
<p>将DDX展开为全屏，原游戏窗口大小不变，流式布局下添加按钮btn，setbounds，背景Lable。</p>
<p>问题二：（未解决）</p>
<p>卡片式切换组件？</p>
<p>文字+纯色背景→图片→组件→程序</p>
<p>new Enter（）后，前个class会自动隐藏掉</p>
<p>问题三：（simplewindow系统设计）</p>
<p>主界面-音乐播放器</p>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/java_gui_1/1567333815566.png" alt=""></figure>
<p>音乐播放器考虑new后会重复播放，而且主界面在new后还在，所以计划把播放器仅仅镶在第一个主界面即可，有难度……应该ok</p>
<p>斗地主界面</p>
<figure data-type="image" tabindex="5"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/java_gui_1/1567333833251.png" alt=""></figure>
<p>推箱子界面</p>
<figure data-type="image" tabindex="6"><img src="https://littlebuzi.github.io/2019/07/30/java/java_gui_1/1567333842977.png" alt=""></figure>
<p>魔兽</p>
<figure data-type="image" tabindex="7"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/java_gui_1/1567333851350.png" alt=""></figure>
<p>相片浏览界面</p>
<figure data-type="image" tabindex="8"><img src="https://littlebuzi.github.io//post-images/2019/07/30/java/java_gui_1/1567333865870.png" alt=""></figure>
<p>主菜单<br>
进度50%</p>
<p>音乐界面修改作为主菜单<br>
看相册界面作为主界面与游戏按钮并列的按钮<br>
这两个项目进展可以，遇到的问题很多也解决了很多，github上的代码不错，要达到预期效果还需要经过不断调整，学习。<br>
进度85%</p>
<br>
<hr>
<br>
<h1 id="简易桌面-v10-错误汇总">简易桌面 v1.0 错误汇总</h1>
<p>问题1：【五子棋退出按钮后序出现多余画面】</p>
<p>注意点1：<br>
【五子棋退出按钮后序出现多余画面】<br>
这是五子棋小游戏的游戏画面</p>
<figure data-type="image" tabindex="9"><img src="https://littlebuzi.github.io//post-images/2019/07/31/java/java_gui_3/1567334208887.png" alt=""></figure>
<p>其他地方大致都调试好，运行都ok。<br>
出问题的是红色圈的按钮；“返回桌面”</p>
<pre><code class="language-java">  if(event.getSource()==exitbtn){
        dispose(); 
//存在执行后，会继续弹出按钮和面板，再按一次吃咸的“确认”按钮，才能正常关闭
 }
</code></pre>
<p>详细如下：</p>
<figure data-type="image" tabindex="10"><img src="https://littlebuzi.github.io//post-images/2019/07/31/java/java_gui_3/1567334259063.png" alt=""></figure>
<p>当按按钮“返回桌面”时，应该是执行“dispose（）”，一个很直接的关闭窗口命令。<br>
然而出现了这一幕，可能是关乎于:</p>
<pre><code class="language-java">
this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
this.setDefaultCloseOperation(JFrame.EXIT_ON_DISPOSE); //（这句dispose）
</code></pre>
<p>不知道正确性，就是当关闭窗口时是否停止整个线程？的意思？</p>
<p>这种情况是出现在用Star()启动时会出现，（frame之间切换的冲突？），单独运行这个五子棋Gobang（），关闭便不会出现这种情况。</p>
<p>注意点2：<br>
【第？个ImagesVewier，尝试通过识别图片分辨率，长和宽来确定他的setbounds和size】<br>
通过识别图片的长和宽，如（图片）width+height&gt;=1800（拟定大小，尽可能小），考虑图片比较小就将其定位于接近框架中间（框架为全屏），并且将其（照片）设为一个800*800（较小）的大小。若width+height&lt;1800，考虑比较大的图片，将其设置为最大窗口大小，后续考虑，图片的长宽比例，进行图片size的调整。</p>
<pre><code class="language-java">if(width+height&gt;=1800){
iconimage.setbounds(200,200,800,800)
}
if(width+height&lt;1800){
iconimage.setbounds(350,350,800,800)//拉扯
}
</code></pre>
<p>注意点3：按钮监听的两种模式<br>
按钮监听的两种模式：第一种可以监听事件里可以直接使用dispose();而第二种需要如：jFrame.dispose()；this.dispose();????还未100%肯定，待研究</p>
<pre><code class="language-java">class entend ActionListener {

//按钮布局，JButton；
如果是在class里初始化声明了如：
JButton DDZButton，BOXButton，WZQButton；
后面接的直接可以是：

DDZButton = new JButton(&quot;斗地主&quot;,new ImageIcon(&quot;images/dizhu.gif&quot;));
BOXButton = new JButton(new ImageIcon(&quot;image/bt.jpg&quot;));
WZQButton = new JButton(&quot;五子棋&quot;,new ImageIcon(&quot;images/5son.png&quot;));        

DDZButton.setBounds(63,34,180,130);
BOXButton.setBounds(64,180,180,133);
WZQButton.setBounds(63,331,188,140);

this.add(WZQButton);
this.add(BOXButton);
this.add(DDZButton);

//装监听
backButton.addActionListener(this);
DDZButton.addActionListener(this);
BOXButton.addActionListener(this);


public ActionListener{

if(ae.getSource()==DDZButton)
             {
                new Main();
             }
            if(ae.getSource()==BOXButton)
             {
                new LoginFrame();
             }
            if(ae.getSource()==WZQButton)
             {
                new Gobang();
             }                   
   }
}
而如果没有事先声明初始化的话
这样：

JButton DDZButton = new JButton(&quot;斗地主&quot;,new ImageIcon(&quot;images/dizhu.gif&quot;));
JButton BOXButton = new JButton(new ImageIcon(&quot;image/bt.jpg&quot;));
JButton WZQButton = new JButton(&quot;五子棋&quot;,new ImageIcon(&quot;images/5son.png&quot;));    
DDZButton.xxxxx{
xxxxxxx
}
//监听都好像不用
</code></pre>
<p>注意点4：imagesviwer拥有的功能</p>
<p>github上的这个imagesviwer拥有的功能与其他类型的图片浏览器相比。其具有多了按钮有图标，其他很相似。但意外发现“-&gt;”这个符号。提示错误，是因为这个符号是jdk1.8的新特性。我得eclipse jdk开发环境最高是到1.7，所以。。然后为了解决这个问题，首先装上一个jdk1.8（这里补充jdk是开发环境，jre是运行环境，即导出成可运行jar后，需要先安装对应版本的jre。），关联eclipse后，依然是不行，（具体：依然提醒和之前一样的错误，没有变化）。然后上了eclipse的官网，Oracle上下了个网络安装包，安装了个应该是ee版本的eclipse，最高jdk版本达到1.9（最新），安装打开后，启动画面是什么otion（氧气的英文）。结果导入包后，运行结果：界面出来了，但是按按钮没反应。（图片并未出来，后面有说明）eclipse里提示错误：</p>
<pre><code class="language-java">{
Exception in thread &quot;AWT-EventQueue-0&quot; java.lang.NullPointerException
     at github.ViewerAction.actionPerformed(ViewerAction.java:39)
     at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
     at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
     at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
     at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
     at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
     at java.awt.Component.processMouseEvent(Unknown Source)
     at javax.swing.JComponent.processMouseEvent(Unknown Source)
     at java.awt.Component.processEvent(Unknown Source)
     at java.awt.Container.processEvent(Unknown Source)
     at java.awt.Component.dispatchEventImpl(Unknown Source)
     at java.awt.Container.dispatchEventImpl(Unknown Source)
     at java.awt.Component.dispatchEvent(Unknown Source)
     at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
     at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
     at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
     at java.awt.Container.dispatchEventImpl(Unknown Source)
     at java.awt.Window.dispatchEventImpl(Unknown Source)
     at java.awt.Component.dispatchEvent(Unknown Source)
     at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
     at java.awt.EventQueue.access$500(Unknown Source)
     at java.awt.EventQueue$3.run(Unknown Source)
     at java.awt.EventQueue$3.run(Unknown Source)
     at java.security.AccessController.doPrivileged(Native Method)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.awt.EventQueue$4.run(Unknown Source)
     at java.awt.EventQueue$4.run(Unknown Source)
     at java.security.AccessController.doPrivileged(Native Method)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.awt.EventQueue.dispatchEvent(Unknown Source)
     at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
     at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
     at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
     at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     at java.awt.EventDispatchThread.run(Unknown Source)
Exception in thread &quot;AWT-EventQueue-0&quot; java.lang.NullPointerException
     at github.ViewerAction.actionPerformed(ViewerAction.java:39)
     at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
     at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
     at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
     at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
     at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
     at java.awt.Component.processMouseEvent(Unknown Source)
     at javax.swing.JComponent.processMouseEvent(Unknown Source)
     at java.awt.Component.processEvent(Unknown Source)
     at java.awt.Container.processEvent(Unknown Source)
     at java.awt.Component.dispatchEventImpl(Unknown Source)
     at java.awt.Container.dispatchEventImpl(Unknown Source)
     at java.awt.Component.dispatchEvent(Unknown Source)
     at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
     at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
     at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
     at java.awt.Container.dispatchEventImpl(Unknown Source)
     at java.awt.Window.dispatchEventImpl(Unknown Source)
     at java.awt.Component.dispatchEvent(Unknown Source)
     at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
     at java.awt.EventQueue.access$500(Unknown Source)
     at java.awt.EventQueue$3.run(Unknown Source)
     at java.awt.EventQueue$3.run(Unknown Source)
     at java.security.AccessController.doPrivileged(Native Method)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.awt.EventQueue$4.run(Unknown Source)
     at java.awt.EventQueue$4.run(Unknown Source)
     at java.security.AccessController.doPrivileged(Native Method)
     at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
     at java.awt.EventQueue.dispatchEvent(Unknown Source)
     at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
     at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
     at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
     at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     at java.awt.EventDispatchThread.run(Unknown Source)
}
</code></pre>
<p>但是以前曾经在通过改变里面的图片绝对路径后，显示图片后，按按钮好像第一次不行，之后再试就可以正常运行了。</p>
<p>注意点5：进入斗地主反应（响应）慢<br>
问题一：进入“斗地主小游戏”的时候，反应速度接近7至8秒。其他的小游戏还行。</p>
<figure data-type="image" tabindex="11"><img src="https://littlebuzi.github.io//post-images/2019/07/31/java/java_gui_3/1567335388861.png" alt=""></figure>
<br>
<hr>
<br>
<h1 id="import-cv2-找不到-face">import cv2 找不到 face</h1>
<p>AttributeError: module 'cv2.face' has no attribute 'createEigenFaceRecognizer' 解决办法</p>
<p>原因：</p>
<p>一.版本问题，目前使用版本cv2.face中createEigenFaceRecognizer更名或移除<br>
解决：请查看对应版本的说明文档，使用对应版本或属性名。</p>
<p>二.未安装<br>
opencv_contrib，所以<br>
model = cv2.face.createEigenFaceRecognizer() 行找不到face<br>
解决：<br>
1.使用pip、源码安装方法</p>
<pre><code class="language-python">pip install opencv-python opencv-contrib-python
</code></pre>
<p>或<br>
<a href="https://blog.csdn.net/wyx100/article/details/78498609">https://blog.csdn.net/wyx100/article/details/78498609</a></p>
<p>2.conda ：</p>
<pre><code class="language-python">conda install opencv-python opencv-contrib-python
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于tensorflow的动漫人物识别参考文献]]></title>
        <id>https://littlebuzi.github.io//post/dongman</id>
        <link href="https://littlebuzi.github.io//post/dongman">
        </link>
        <updated>2019-10-21T07:29:59.000Z</updated>
        <content type="html"><![CDATA[<p>参考文献：</p>
<p><a href="https://blog.csdn.net/abcd740181246/article/details/89878613">https://blog.csdn.net/abcd740181246/article/details/89878613</a></p>
<p><a href="https://blog.csdn.net/zyxhangiian123456789/article/details/87911999">https://blog.csdn.net/zyxhangiian123456789/article/details/87911999</a></p>
<p><a href="https://blog.csdn.net/qq_29007291/article/details/81103603">https://blog.csdn.net/qq_29007291/article/details/81103603</a></p>
<p><a href="https://blog.csdn.net/mozf881/article/details/84929443">https://blog.csdn.net/mozf881/article/details/84929443</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python & Minecraft]]></title>
        <id>https://littlebuzi.github.io//post/minecraft_python</id>
        <link href="https://littlebuzi.github.io//post/minecraft_python">
        </link>
        <updated>2019-10-21T07:04:18.000Z</updated>
        <content type="html"><![CDATA[<p>1.用python学习minecraft<br>
原理：用python2.7.6接入mc游戏接口，利用python语句调试mc游戏。<br>
异常：控制台（开服器cmd）有时会出现python调试后（已经开始执行运行一个py时），无反应，游戏也是。按下回车后即可（类似于刷新），才有反应（恢复正常）</p>
<p>最为基础的是这个“将pythonGUI和mc游戏连接起来”具体是python链接进mc提供的接口： 创建一个py格式文件，在myadventure目录下例：buildHouse.py<br>
1.导入需要的模块：【类似于Java的Import】import mcpi.minecraft as minecraftimport mcpi.block as block(还有时间方面的import time)</p>
<p>2.连接Minecraft游戏：【注意大小写，英文冒号以及python语言格式】mc=minecraft.Minecraft.create()</p>
<p>一.<br>
1.在这个网站下载“入门包”：<a href="https://www.wiley.com/WileyCDA/Section/id-823690.html">https://www.wiley.com/WileyCDA/Section/id-823690.html</a><br>
<img src="https://littlebuzi.github.io//post-images/2019/08/09/python/learn_mc_1/1568084356167.png" alt=""><br>
2.python2.7.6下载：<a href="https://www.python.org/download/releases/2.7.6/">https://www.python.org/download/releases/2.7.6/</a><br>
二.</p>
<p>1.打开 开服器cmd，开服localhost，使用mc1.6.4客户端连上localhost</p>
<p>…</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[typecho博客主题修改]]></title>
        <id>https://littlebuzi.github.io//post/typecho_theme</id>
        <link href="https://littlebuzi.github.io//post/typecho_theme">
        </link>
        <updated>2019-10-21T06:51:32.000Z</updated>
        <content type="html"><![CDATA[<p>以下为修改主题，自定义的一些配置：<br>
原主题地址：</p>
<p>Postbird-typecho-two-sidebar-block作者: <a href="http://www.ptbird.cn/">postbird</a> 版本: 0.0.1Postbird typecho 两栏博客简约主题</p>
<p>了解详情：</p>
<p><a href="https://gitee.com/postbird/typecho-blog-theme-two-siderbar">https://gitee.com/postbird/typecho-blog-theme-two-siderbar</a></p>
<p>仿docs主题（改进）：</p>
<p>1.导航栏颜色，背景。<br>
2.菜单折叠颜色。<br>
3.模板响应式。</p>
<p>随缘找回来，因为以选择其他主题，有空换一下截个图（然而也没人看，主要是记录修改的规律嗯）</p>
<p>自定义脚本：（百度统计）</p>
<pre><code class="language-javascript">&lt;script&gt;
    (function(){
        var canonicalURL, curProtocol;
        //Get the &lt;link&gt; tag
        var x=document.getElementsByTagName(&quot;link&quot;);
        //Find the last canonical URL
        if(x.length &gt; 0){
            for (i=0;i&lt;x.length;i++){
                if(x[i].rel.toLowerCase() == 'canonical' &amp;&amp; x[i].href){
                    canonicalURL=x[i].href;
                }
            }
        }
        //Get protocol
        if (!canonicalURL){
            curProtocol = window.location.protocol.split(':')[0];
        }
        else{
            curProtocol = canonicalURL.split(':')[0];
        }
        //Get current URL if the canonical URL does not exist
        if (!canonicalURL) canonicalURL = window.location.href;
        //Assign script content. Replace current URL with the canonical URL
        !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=canonicalURL,t=document.referrer;if(!e.test(r)){var n=(String(curProtocol).toLowerCase() === 'https')?&quot;https://sp0.baidu.com/9_Q4simg2RQJ8t7jm9iCKT-xh_/s.gif&quot;:&quot;//api.share.baidu.com/s.gif&quot;;t?(n+=&quot;?r=&quot;+encodeURIComponent(document.referrer),r&amp;&amp;(n+=&quot;&amp;l=&quot;+r)):r&amp;&amp;(n+=&quot;?l=&quot;+r);var i=new Image;i.src=n}}(window);})();
&lt;/script&gt;
</code></pre>
<p>自定义 stylesheet 样式：</p>
<pre><code class="language-css">.widget {
    margin-bottom: 0!important;
}

.list-group-item-info {
    color: #fff;
}

#secondary .list-group-item.list-group-item-info {
    background-color: #343a40!important;
}
</code></pre>
]]></content>
    </entry>
</feed>