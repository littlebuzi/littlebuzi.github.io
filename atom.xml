<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://littlebuzi.github.io/</id>
    <title>buzi</title>
    <updated>2020-03-09T11:39:07.874Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://littlebuzi.github.io/"/>
    <link rel="self" href="https://littlebuzi.github.io/atom.xml"/>
    <subtitle>德丽莎世界第一可爱</subtitle>
    <logo>https://littlebuzi.github.io/images/avatar.png</logo>
    <icon>https://littlebuzi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, buzi</rights>
    <entry>
        <title type="html"><![CDATA[二次元识图工具网站]]></title>
        <id>https://littlebuzi.github.io/post/amine_reg_1</id>
        <link href="https://littlebuzi.github.io/post/amine_reg_1">
        </link>
        <updated>2020-03-09T10:57:23.000Z</updated>
        <content type="html"><![CDATA[<p>1、 https://trace.moe/ 找番剧网站，有大量日番资源<br>
优点：找到图片番剧后可实时预览<br>
缺点：只能识别番剧，魔改、加水印、模糊等图片不可用<br>
2、 https://saucenao.com/ 找画网站，接入p站等数据<br>
优点：识别很多画师原创图及同人图<br>
缺点：查找结果为英文、日文、罗马音等。需要借助翻译工具<br>
3、 https://www.baidu.com/ 搜索引擎类，百度谷歌等<br>
优点：可找的范围很广，包括但不限于：动漫、各类MV、影视剧等等，全中文<br>
缺点：结果并不是很精确需要进一步搜索，可能出现奇怪的结果<br>
4、人肉识别@凉风Kaze[doge]<br>
优点：快 准 狠<br>
缺点：消耗一个三连（误）<br>
6.各种搜索引擎，某度，某狗，某歌等等……<br>
优点：谷歌搜索更广更专业<br>
缺点：国内没有，可尝试这个第三方国内版https://gfsoso.fcczp.com/image.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二次元识图工具网站]]></title>
        <id>https://littlebuzi.github.io/post/q_e2KfDU3</id>
        <link href="https://littlebuzi.github.io/post/q_e2KfDU3">
        </link>
        <updated>2020-03-09T10:57:23.000Z</updated>
        <content type="html"><![CDATA[<p>1、 https://trace.moe/ 找番剧网站，有大量日番资源<br>
优点：找到图片番剧后可实时预览<br>
缺点：只能识别番剧，魔改、加水印、模糊等图片不可用<br>
2、 https://saucenao.com/ 找画网站，接入p站等数据<br>
优点：识别很多画师原创图及同人图<br>
缺点：查找结果为英文、日文、罗马音等。需要借助翻译工具<br>
3、 https://www.baidu.com/ 搜索引擎类，百度谷歌等<br>
优点：可找的范围很广，包括但不限于：动漫、各类MV、影视剧等等，全中文<br>
缺点：结果并不是很精确需要进一步搜索，可能出现奇怪的结果<br>
4、人肉识别@凉风Kaze[doge]<br>
优点：快 准 狠<br>
缺点：消耗一个三连（误）<br>
6.各种搜索引擎，某度，某狗，某歌等等……<br>
优点：谷歌搜索更广更专业<br>
缺点：国内没有，可尝试这个第三方国内版https://gfsoso.fcczp.com/image.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP、JS、CSS基操]]></title>
        <id>https://littlebuzi.github.io/post/php_jicao_1</id>
        <link href="https://littlebuzi.github.io/post/php_jicao_1">
        </link>
        <updated>2020-02-18T06:23:45.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h1 id="php">PHP</h1>
<p>PHP生成随机数的几种方法<br>
https://www.cnblogs.com/jjxhp/p/9601147.html</p>
<p>PHP 升级到5.5后MySQL的代替法<br>
https://blog.csdn.net/apple_llb/article/details/51406648</p>
<p>使用PHP实现用户注册登录的功能<br>
https://github.com/Micanss/PHP-Register-Login</p>
<p>php调用exe一直加载怎么回事？<br>
https://ask.csdn.net/questions/231711</p>
<p>... ...</p>
<hr>
<h1 id="javascript">JavaScript</h1>
<p>报错TypeError: $(...).live is not a function</p>
<p>解决：用  .on  代替  .live  , 旧的版本被替换了</p>
<p>https://blog.csdn.net/qq_36370731/article/details/79016451</p>
<p>报错TypeError: $(…).ajaxForm is not a function</p>
<p>可能：<br>
1.jquery版本和bootstrap冲突<br>
2.同时加载了两次jquery</p>
<p>https://stackoverflow.com/questions/35261239/ajaxform-is-not-a-function#</p>
<p>【JavaScript】按钮绑定点击事件-onCliek事件<br>
https://blog.csdn.net/kye055947/article/details/79619538</p>
<p>iframe 自适应高度，更改内容时iframe高度怎么根据新的内容高度自动改变<br>
https://blog.csdn.net/txqd1989/article/details/78551943</p>
<p>... ...</p>
<hr>
<h1 id="css-前端">CSS 前端</h1>
<p>css input[type=file] 样式美化，input上传按钮美化<br>
https://blog.csdn.net/cuilei210/article/details/78842231</p>
<p>菜鸟教程：CSS 按钮示范<br>
https://www.runoob.com/css3/css3-buttons.html</p>
<hr>
<h1 id="cmd">cmd</h1>
<p>运行CMD里面，怎么把得到的结果数据保存为文本文件<br>
https://zhidao.baidu.com/question/596846191.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflow利用inception_v3模型和retrain实现图像分类训练]]></title>
        <id>https://littlebuzi.github.io/post/tensorflow2</id>
        <link href="https://littlebuzi.github.io/post/tensorflow2">
        </link>
        <updated>2020-02-15T09:22:17.000Z</updated>
        <content type="html"><![CDATA[<p>参考文献：<br>
https://blog.csdn.net/ZeyiRTangent/article/details/87886445</p>
<p>#准备：</p>
<p>1.五个分类好存有各自类别的文件夹【文件夹及其内图片的名称全小写，绝对路径名中不能包含中文】</p>
<p>2.inception_v3模型下载，无需解压【http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz】</p>
<p>3.克隆/下载 https://github.com/tensorflow/tensorflow &amp; https://github.com/tensorflow/hub （在~hub-master\examples\image_retraining中找到retrain.py文件，待会需要定位文件位置）</p>
<p>。。。</p>
<hr>
<h1 id="可能遇到的问题">可能遇到的问题：</h1>
<ol>
<li></li>
</ol>
<p>查看Windows下TensorFlow对python版本的要求<br>
https://blog.csdn.net/sinat_23619409/article/details/84202596</p>
<ol start="2">
<li></li>
</ol>
<p>windows10 conda python多版本切换<br>
https://www.cnblogs.com/simuhunluo/p/8540459.html</p>
<ol start="3">
<li></li>
</ol>
<p>windows 怎么更新 Python 版本（现有 Python 版本装了很多库）卸载重装，工作量就大了，有没有什么直接更新的方式，不会删库那种办法<br>
https://www.v2ex.com/amp/t/477473</p>
<ol start="4">
<li></li>
</ol>
<p>conda（anaconda）删除清华源，改回原源<br>
https://blog.csdn.net/qinglingLS/article/details/89363368</p>
<ol start="5">
<li></li>
</ol>
<p>PackagesNotFoundError: The following packages are not available from current channels:<br>
https://blog.csdn.net/miao0967020148/article/details/85230430</p>
<ol start="6">
<li></li>
</ol>
<p>迁移学习关于下载不了inception-v3，自己网络又加载不了的问题<br>
https://blog.csdn.net/nationalline450/article/details/82085007</p>
<p>原址：<br>
https://tfhub.dev/google/imagenet/inception_v3/feature_vector/3</p>
<ol start="7">
<li></li>
</ol>
<p>出现以下报错：</p>
<pre><code class="language-python">Warning! ***HDF5 library version mismatched error***
The HDF5 header files used to compile this application do not match
the version used by the HDF5 library to which this application is linked.
Data corruption or segmentation faults may occur if the application continues.
This can happen when an application was compiled by one version of HDF5 but
linked with a different version of static or shared HDF5 library.
You should recompile the application or check your shared library related
settings such as 'LD_LIBRARY_PATH'.
You can, at your own risk, disable this warning by setting the environment
variable 'HDF5_DISABLE_VERSION_CHECK' to a value of '1'.
Setting it to 2 or higher will suppress the warning messages totally.
Headers are 1.10.4, library is 1.10.5
        SUMMARY OF THE HDF5 CONFIGURATION
        =================================

General Information:
-------------------
                   HDF5 Version: 1.10.5
                  Configured on: 2019-03-04
  
... ... ... 
... ... ... 
 
          Function Stack Tracing: OFF
       Strict File Format Checks: OFF
    Optimization Instrumentation:
Bye...

</code></pre>
<p>（多版本导致冲突）pip uninstall h5py<br>
Ubuntu: HDF5报错: HDF5 header version与HDF5 library不匹配<br>
https://www.cnblogs.com/platero/p/4077934.html</p>
<p>Python环境中HDF5报错：HDF5 library version mismatched error<br>
https://blog.csdn.net/zhaoyin214/article/details/104095227</p>
<p>使用conda装完plt/pillow后，错误又出来了，详细看，conda在安装pillow时帮你安装hdf5版本了：<br>
再卸载一次h5py，然后可能提示：</p>
<p>ModuleNotFoundError: No module named 'matplotlib' ， python导入'matplotlib'包报错</p>
<p>解决：https://blog.csdn.net/weixin_43670105/article/details/87911820</p>
<p>【不能解决】 UserWarning: h5py is running against HDF5 1.10.2 when it was built against 1.10.3, this may ca...<br>
https://www.jianshu.com/p/c248bbea1da7</p>
<ol start="8">
<li></li>
</ol>
<p>tensorflow版本：2.0过高怎么办？</p>
<p>解决：</p>
<p>适当回退tensorflow版本：<br>
pip install tensorflow==1.13.1</p>
<p>安装Tensorflow 2.0后的坑has no attribute 'contrib'<br>
https://blog.51cto.com/cfy10/2446977?source=dra</p>
<p>ModuleNotFoundError: No module named 'tensorflow.contrib.rnn'<br>
https://blog.csdn.net/u014742995/article/details/86496292</p>
<ol start="9">
<li></li>
</ol>
<p>提示python版本过高、冲突（tensorflow版本）怎么办？</p>
<p>conda install python=3.6</p>
<p>Anaconda中将python 3.7版本退回python 3.6版本<br>
https://blog.csdn.net/Fhujinwu/article/details/85851587</p>
<h1 id="参考文献">参考文献：</h1>
<p>https://blog.csdn.net/ZeyiRTangent/article/details/87886445</p>
<h1 id="相似推荐有助思考">相似推荐，有助思考：</h1>
<p>https://blog.csdn.net/weixin_38663832/article/details/80555341<br>
https://blog.csdn.net/EZ_guachong/article/details/90048846<br>
https://github.com/sourcedexter/tfClassifier<br>
https://stackoverflow.com/questions/45076911/tensorflow-failed-to-create-a-newwriteablefile-when-retraining-inception</p>
<h2 id="迁移学习">迁移学习</h2>
<p>https://blog.csdn.net/chaipp0607/article/details/73380390<br>
https://blog.csdn.net/Night___Raid/article/details/102975023</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow支持的动漫人物识别网站的存储库]]></title>
        <id>https://littlebuzi.github.io/post/tensorflow3</id>
        <link href="https://littlebuzi.github.io/post/tensorflow3">
        </link>
        <updated>2020-02-15T09:22:17.000Z</updated>
        <content type="html"><![CDATA[<p>开始：<br>
在知乎上偶然阅读到这位作者的文章：https://zhuanlan.zhihu.com/p/70511070</p>
<p>参考：<br>
https://github.com/freedomofkeima/MoeFlow<br>
https://github.com/freedomofkeima/transfer-learning-anime<br>
https://github.com/nagadomi/animeface-2009<br>
https://github.com/KichangKim/DeepDanbooru/releases/tag/v1-20191108-sgd-e30</p>
<p>我也试着弄，放弃了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About Download]]></title>
        <id>https://littlebuzi.github.io/post/download1</id>
        <link href="https://littlebuzi.github.io/post/download1">
        </link>
        <updated>2020-02-13T05:15:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="下载">下载</h1>
<p>https://www.4kdownload.com/zh-cn/downloads</p>
<p>https://github.com/soimort/you-get</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python基操]]></title>
        <id>https://littlebuzi.github.io/post/pacong</id>
        <link href="https://littlebuzi.github.io/post/pacong">
        </link>
        <updated>2020-01-31T12:06:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python-爬虫-beautifulsoup4-基础">Python 爬虫 beautifulsoup4 基础</h1>
<h2 id="pycharm-python环境搭建好后">pycharm、python环境搭建好后</h2>
<p>装载html文档，使用beautifulsoup的第一步是把html文档装载到beautifulsoup中，使其形成一个beautifulsoup对象。</p>
<pre><code>import requests
from bs4 import BeautifulSoup
url = &quot;xxxx&quot;
r = requests.get(url)
htmls = r.text
#print(htmls)
soup = BeautifulSoup(htmls, 'html.parser')
</code></pre>
<p>初始化BeautifulSoup类时，需要加入两个参数，第一个参数即是我们爬到html源码，第二个参数是html解析器，常用的有三个解析器，分别是”html.parser”,”lxml”,”html5lib”，官网推荐用lxml，因为效率高，当然需要pip install lxml一下。</p>
<h2 id="例子">例子</h2>
<p>html对象：</p>
<pre><code>uls='''
&lt;h3&gt;Header3 (Start here)&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;List items&lt;/li&gt;
    &lt;li&gt;Etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Header 3&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;List items&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt;Nested list items&lt;/li&gt;
        &lt;li&gt;Nested list items&lt;/li&gt;&lt;/ul&gt;
    &lt;li&gt;List items&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Header 2 (end here)&lt;/h2&gt;

lis = []
    for ul in uls:
        for li in ul.findAll('li'):
            if li.find('ul'):
                break
            lis.append(li)

    for li in lis:
        print(li.text)
        #print(li.text.encode(&quot;utf-8&quot;))

</code></pre>
<p>https://www.jb51.net/article/156907.htm<br>
https://blog.csdn.net/huxiny/article/details/79679066</p>
<h2 id="百度图片爬虫">百度图片爬虫：</h2>
<p>https://blog.csdn.net/qq_40774175/article/details/81273198</p>
<h2 id="python代码报错-fileexistserror-winerror-183-当文件已存在时无法创建该文件">Python代码报错 FileExistsError: [WinError 183] 当文件已存在时，无法创建该文件。</h2>
<p>检查路劲是否有中文，有则换成英文或数字</p>
<p>https://zhidao.baidu.com/question/1309336445243832299.html</p>
<hr>
<h1 id="python-读取和输出到-txt-文件">Python 读取和输出到 txt 文件</h1>
<pre><code class="language-python">with open(&quot;test.txt&quot;, &quot;r&quot;,encoding='UTF-8') as f:  # 打开文件
    data = f.read()  # 读取文件
    print(data)
</code></pre>
<p>读入这种文件时：<br>
test.txt</p>
<pre><code>樱之宫莓香
轰焦冻
鬼灯
和泉守兼定
</code></pre>
<pre><code class="language-python">str=[]
with open(&quot;test.txt&quot;, &quot;r&quot;,encoding='UTF-8') as f:  # 打开文件
    data = f.readlines()
    for line in data:
        line = line.strip('\n')  # 去掉列表中每一个元素的换行符
        str.append(line)
    print(str)
</code></pre>
<p>参考：<br>
<a href="https://blog.csdn.net/zhang__shuang_/article/details/82527314">https://blog.csdn.net/zhang__shuang_/article/details/82527314</a></p>
<p>Python读取文件时出现UnicodeDecodeError: 'gbk' codec can't decode byte 0x80 in position xx: 解决方案:</p>
<p><a href="https://blog.csdn.net/zhang__shuang_/article/details/82527314">https://blog.csdn.net/zhang__shuang_/article/details/82527314</a></p>
<hr>
<p>①：<a href="https://www.v2ex.com/t/476712">Python 正则表达式 re 中出现'str' object has no attribute 'findall'</a></p>
<p>②：<a href="https://blog.csdn.net/DansonC/article/details/88860936">出现TypeError: 'list' object is not callable异常的情况与解决方法</a></p>
<p>③：<a href="https://blog.csdn.net/Dr_mark/article/details/82853827">利用python将中文名转换为英文名</a></p>
<h1 id="用批处理命令获取文件夹名称">用批处理命令获取文件夹名称</h1>
<p>https://zhidao.baidu.com/question/936329819153763892.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【MMD】MikuMikuDance入门]]></title>
        <id>https://littlebuzi.github.io/post/mmd1</id>
        <link href="https://littlebuzi.github.io/post/mmd1">
        </link>
        <updated>2020-01-05T04:23:24.000Z</updated>
        <content type="html"><![CDATA[<p>1.下载<br>
https://www.bilibili.com/video/av20662019/<br>
http://blog.sina.com.cn/s/blog_15fe57f4d0102x6g9.html<br>
http://www.3322.cc/search.asp?wd=miku</p>
<p>2.教程<br>
http://blog.sina.com.cn/s/blog_15fe57f4d0102x7mm.html<br>
http://tieba.baidu.com/p/5868731425<br>
http://blog.sina.com.cn/s/blog_15fe57f4d0102x66y.html<br>
https://zhidao.baidu.com/question/488239911574372932.html<br>
https://tieba.baidu.com/p/5020448822?pn=1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win 搭建 Go + Beego + Idea]]></title>
        <id>https://littlebuzi.github.io/post/go1</id>
        <link href="https://littlebuzi.github.io/post/go1">
        </link>
        <updated>2019-12-14T10:25:55.000Z</updated>
        <content type="html"><![CDATA[<br>
<p>1.安装 Go<br>
选择window版本：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p>
<br>
<p>2.安装 idea<br>
下载：<a href="https://www.cnblogs.com/horvey/p/10173706.html">IntelliJ IDEA 2018.3 安装+永久激活:</a>（版本需小于2019,有可能plugins商店使用异常）</p>
<br>
<ol start="3">
<li>idea 中配置安装 go<br>
<a href="https://blog.csdn.net/cui_yonghua/article/details/90900336">https://blog.csdn.net/cui_yonghua/article/details/90900336</a></li>
</ol>
<br>
<ol start="4">
<li>idea 中安装 bee<br>
IDEA打开命令行快捷键：Alt + F12</li>
</ol>
<br>
<p>5.安装 beego</p>
<pre><code class="language-go">
输入：

//检验
go version 

//下载beego框架
go get -u github.com/astaxie/beego
go get -u github.com/beego/bee

//等待片刻

下载完后：

go bee version（检验）

//成功

</code></pre>
<br>
<p>6.第一个 go 项目</p>
<p><a href="https://blog.csdn.net/cui_yonghua/article/details/96964653">在windows环境下搭建beego环境 以及第一个项目</a></p>
<br>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于 tensorflow 的动漫人物识别]]></title>
        <id>https://littlebuzi.github.io/post/face_1</id>
        <link href="https://littlebuzi.github.io/post/face_1">
        </link>
        <updated>2019-12-10T06:26:30.000Z</updated>
        <content type="html"><![CDATA[<br>
<blockquote>
<ul>
<li>总目标：实现动漫人脸识别、建立动漫人脸数据库</li>
<li>本文定位在有一定python、linux基础和我这样的学生阅读</li>
<li>遇到问题❓/错误❌，请查看文末或文章间隙</li>
</ul>
</blockquote>
<h1 id="1-标注图片中动漫人物的脸部">1、标注图片中动漫人物的脸部</h1>
<p>环境：<br>
服务器：腾讯云（新用户优惠，阿里云之前使用了）<br>
操作系统：CetenOS 6.5 (环境配置复杂度: Window &gt; Centos &gt; Ubuntu 因个人原因使用centos较多)<br>
python版本：3.5（自带2.6.6）<br>
window端（客户端）工具：Xshell、Xftp</p>
<h2 id="11-依赖下载">1.1、依赖下载：</h2>
<p>① 动漫人脸分类器下载：</p>
<p>https://github.com/nagadomi/lbpcascade_animeface/</p>
<figure data-type="image" tabindex="1"><img src="https://littlebuzi.github.io//post-images/1573551561230.png" alt="" loading="lazy"></figure>
<p>② i2v库的安装：</p>
<p>Github：https://github.com/rezoo/illustration2vec/</p>
<figure data-type="image" tabindex="2"><img src="https://littlebuzi.github.io//post-images/1573048673712.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://littlebuzi.github.io//post-images/1573051147771.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://littlebuzi.github.io//post-images/1573051210275.png" alt="" loading="lazy"></figure>
<h2 id="12-test环境">1.2、Test环境：</h2>
<p>准备下linux服务器主机(centos)属性、环境：</p>
<ul>
<li>
<p><a href="https://jingyan.baidu.com/article/fdbd4277b16d1cb89e3f48e4.html">查看linux系统CPU和内存命令</a></p>
</li>
<li>
<p>python -V</p>
</li>
<li>
<p>安装anaconda（推荐安装中等较新版本，尽量避免未知错误）/ 安装pip（可能后续会出问题）<br>
<a href="https://blog.csdn.net/jh0218/article/details/85097061">CentOS 7安装Anaconda3</a></p>
</li>
<li>
<p>import cv2</p>
</li>
</ul>
<blockquote>
<p>可能会遇到anaconda崩了，涉及python多重版本conda软链接指向出了问题等：</p>
<ul>
<li><a href="https://blog.csdn.net/hubinbinheda/article/details/81175263">修改软链接</a></li>
<li><a href="https://codeday.me/bug/20190219/660678.html">修改.bashrc</a></li>
<li><a href="https://blog.csdn.net/qian2213762498/article/details/87385193">重新安装anaconda</a></li>
<li>或者使用了<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a>或其他源的旧版本，或<a href="https://www.anaconda.com/distribution/">官方版</a>的最新，尝试anaconda版本回退一点点</li>
</ul>
</blockquote>
<h2 id="13-参数查询-环境调试结束开始测试功能">1.3、参数查询、环境调试结束，开始测试功能：</h2>
<p>文件目录：<br>
<img src="https://littlebuzi.github.io//post-images/1573551285992.png" alt="" loading="lazy"></p>
<p>动漫人脸检测并截取：<br>
(尝试进行从一张图片中识别并截取人脸进行保存的操作)</p>
<pre><code class="language-python">
#coding=utf-8
import cv2
import sys
import os.path

cascade = cv2.CascadeClassifier('/root/comic/lbpcascade_animeface.xml')  # 引入xml
image = cv2.imread('/root/comic/test.jpg', cv2.IMREAD_COLOR)  # 读入一幅彩色图片
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # 色彩空间转换
gray = cv2.equalizeHist(gray)  # 图像直方图均衡化

faces = cascade.detectMultiScale(gray,
                                 # detector options
                                 scaleFactor=1.1,
                                 minNeighbors=5,
                                 minSize=(24, 24))

i = 0
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)

    face = image[y: y + h, x:x + w, :]
    face = cv2.resize(face, (96, 96))
    save_filename = '%s_%d.png' % (os.path.basename('/root/comic/faces/').split('.')[0], i)
    cv2.imwrite(&quot;/root/comic/faces/&quot; + save_filename, face)
    i = i + 1

#cv2.imshow(&quot;AnimeFaceDetect&quot;, image)
cv2.waitKey(0)
cv2.imwrite(&quot;/root/comic/out.png&quot;, image)

</code></pre>
<hr>
<h1 id="2-截取并保存视频一帧帧截取到的动漫人脸目标">2、截取并保存视频一帧帧截取到的动漫人脸(目标)：</h1>
<h2 id="21-文件目录">2.1、文件目录：</h2>
<figure data-type="image" tabindex="5"><img src="https://littlebuzi.github.io//post-images/1573556199362.png" alt="" loading="lazy"></figure>
<h2 id="22-导入视频一帧帧截取动漫人脸">2.2、导入视频一帧帧截取动漫人脸：</h2>
<pre><code class="language-python">
#coding=utf-8
import cv2
import os

face_id = 1
count = 0
cap = cv2.VideoCapture('/root/comic/1.mp4')
face_detector = cv2.CascadeClassifier('/root/comic/lbpcascade_animeface.xml')

while True:

    # 从摄像头读取图片
    sucess, img = cap.read()
    # 转为灰度图片
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # 检测人脸
    faces = face_detector.detectMultiScale(gray, 1.3, 5)
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x+w, y+w), (255, 0, 0))
        count += 1
        font = cv2.FONT_HERSHEY_TRIPLEX
        cv2.putText(img, 'num:%d' % (count), (x + 30, y + 30), font, 1, (255, 0, 255), 4)
        # 保存图像
        cv2.imwrite(&quot;/root/comic/characters/User.&quot; + str(face_id) + '.' + str(count) + '.jpg', gray[y: y + h, x: x + w])
        #cv2.imshow('image', img)
    # 保持画面的持续。
    k = cv2.waitKey(1)

    if k == 27:   # 通过esc键退出摄像
        break

# 关闭摄像头
cap.release()
cv2.destroyAllWindows()

</code></pre>
<hr>
<h2 id="22-分类图片">2.2、分类图片：</h2>
<p>将不同人物分类到属于他命名的文件夹下：</p>
<pre><code class="language-python">
#开发中

</code></pre>
<hr>
<h1 id="3-训练图片">3、训练图片：</h1>
<p>开始制定、训练出模型(代码太长影响观感,完整代码<a href="https://github.com/littlebuzi/">github</a>)：</p>
<pre><code class="language-python">
#coding=utf-8
from skimage import io, transform
import glob
import os
import tensorflow as tf
import numpy as np
import time
import matplotlib.pyplot as plt

# 训练验证数据集目录
path = '/root/comic_reg/data/train-validation-set/'#最后少了个斜杠 读入失败
# 模型保存地址，最后接的是模型名字
model_path = '/root/comic_reg/model/model.ckpt'

# 将所有的图片resize成100*100

# 读取图片

# 打乱顺序

# 将所有数据分为训练集和验证集
ratio = 0.7
s = np.int(num_example*ratio)
x_train = data[:s]
y_train = label[:s]
x_val = data[s:]
y_val = label[s:]

# -----------------构建网络----------------------
# 占位符
x = tf.placeholder(tf.float32, shape=[None, w, h, c], name='x')
y_ = tf.placeholder(tf.int32, shape=[None, ], name='y_')

# 第一个卷积层（100——&gt;50)

# 第二个卷积层(50-&gt;25)

# 第三个卷积层(25-&gt;12)

# 第四个卷积层(12-&gt;6)

# 全连接层

# ---------------------------网络结束---------------------------

# (小处理)将logits乘以1赋值给logits_eval，定义name，方便在后续调用模型时通过tensor名字调用输出tensor

# 定义一个函数，按批次取数据

# 训练和测试数据，可将n_epoch设置更大一些
n_epoch = 50
batch_size = 32
saver = tf.train.Saver()
sess = tf.Session()
sess.run(tf.global_variables_initializer())

# 自定义保存数据列表
trainlosslist = []
trainacclist = []
validationlosslist = []
validationacclist = []


for epoch in range(n_epoch):
    start_time = time.time()
    
    # training
    train_loss, train_acc, n_batch = 0, 0, 0
    for x_train_a, y_train_a in minibatches(x_train, y_train, batch_size, shuffle=True):
        _, err, ac = sess.run([train_op,loss,acc], feed_dict={x: x_train_a, y_: y_train_a})
        train_loss += err; train_acc += ac; n_batch += 1
    print(&quot;   train loss: %f&quot; % (train_loss / n_batch))
    print(&quot;   train acc: %f&quot; % (train_acc / n_batch))
    # 添加到列表
    trainlosslist.append(train_loss / n_batch)
    trainacclist.append(train_acc / n_batch)

    # validation
    val_loss, val_acc, n_batch = 0, 0, 0
    for x_val_a, y_val_a in minibatches(x_val, y_val, batch_size, shuffle=False):
        err, ac = sess.run([loss, acc], feed_dict={x: x_val_a, y_: y_val_a})
        val_loss += err; val_acc += ac; n_batch += 1
    print(&quot;   validation loss: %f&quot; % (val_loss / n_batch))
    print(&quot;   validation acc: %f&quot; % (val_acc / n_batch))
    # 添加到列表
    validationlosslist.append(val_loss / n_batch)
    validationacclist.append(val_acc / n_batch)

saver.save(sess,model_path)
sess.close()

# 绘图
x = np.arange(1, n_epoch, 1)

plt.plot(x, np.array(trainacclist)[x-1], label=&quot;train-acc&quot;)
plt.plot(x, np.array(validationacclist)[x-1], label=&quot;validation-acc&quot;)
plt.plot(x, np.array(trainlosslist)[x-1], label=&quot;train-loss&quot;)
plt.plot(x, np.array(validationlosslist)[x-1], label=&quot;validation-loss&quot;)

# 设置坐标轴名称
plt.xlabel('epoch')

# 画两条基准线
plt.plot(x, x/x, label=&quot;one&quot;)
plt.plot(x, x-x, label=&quot;zero&quot;)

# 参数：loc设置显示的位置，0是自适应；ncol设置显示的列数
plt.legend(loc=0, ncol=1)   
#plt.show()
plt.savefig(&quot;/root/comic_reg/out.png&quot;)

</code></pre>
<hr>
<h1 id="4-识别图片">4、识别图片：</h1>
<pre><code class="language-python">
from skimage import io,transform
import tensorflow as tf
import numpy as np
import glob

path = '/root/comic_reg/data/test-set/*.png'

image_dict = {0: '一花',1:'二乃',2:'三玖',3:'四叶',4:'五月'}
count_true=[]

w=100
h=100
c=3

def read_one_image(path):
    img = io.imread(path)
    img = transform.resize(img,(w,h))
    return np.asarray(img)

with tf.Session() as sess:
    data = []
  
    # 目录列表
    paths = glob.glob(path)
    #print(paths)
    for img in paths:
        data.append(read_one_image(img))

    saver = tf.train.import_meta_graph('/root/comic_reg/model/model.ckpt.meta')
    saver.restore(sess,tf.train.latest_checkpoint('/root/comic_reg/model/'))

    graph = tf.get_default_graph()
    x = graph.get_tensor_by_name(&quot;x:0&quot;)
    feed_dict = {x:data}

    logits = graph.get_tensor_by_name(&quot;logits_eval:0&quot;)

    classification_result = sess.run(logits,feed_dict)
    

    #打印出预测矩阵
    print(&quot;\n预测矩阵:\n&quot;, classification_result)
    #打印出预测矩阵每一行最大值的索引
    print(&quot;\n简略结果:\n&quot;, tf.argmax(classification_result,1).eval(), '\n')
    print(&quot;具体情况: &quot;)
    #根据索引通过字典对应人物的分类
    output = []
    output = tf.argmax(classification_result,1).eval()
    count = 0
    for i in range(len(output)):
        # output[i]是测试结果编码，paths[i])[-7]是原定图片编号（路飞1）
        flag = False
        if str(output[i]+1) == paths[i][-7]:
            flag = True
            if flag == True:
                count_true.append(paths[i][-7:])
            count += 1
        print(&quot;第 &quot; + str(i+1) +  &quot; 张 (&quot; +   paths[i][-7:] + &quot;) 人物预测: &quot; + image_dict[output[i]]  + &quot; &quot; + str(flag))
    print(&quot;\n准确率: {:.2f}%&quot;.format(count / len(output) * 100 ))

print(count_true)

</code></pre>
<hr>
<p>结果：<br>
<img src="https://littlebuzi.github.io//post-images/1575866273011.png" alt="" loading="lazy"><br>
因为只有第一个人物图片准备充足所以其他人物识别率会偏低</p>
<hr>
<p>之前使用：</p>
<p>服务器：腾讯云<br>
操作系统：Ubuntu Server 18.04.1 LTS 64位<br>
类型：公共镜像（池）<br>
内存：2 GB<br>
CPU：1 核<br>
硬盘：50 G<br>
公网带宽：1 Mbps</p>
<hr>
<h2 id="步骤11中可能遇到的问题">步骤1.1中可能遇到的问题：</h2>
<p>1.下载速度太慢：</p>
<h2 id="法一">法一：</h2>
<p>liunx 下载 Github_Releases 下载提速：</p>
<p>Linux系统下hosts文件的位置是 /etc/hosts ，以root用户登录Linux，使用vi编辑/etc/hosts文件，将附加的内容添加在其后面即可：</p>
<p>修改hosts(liunx):<br>
52.216.186.155 github-production-release-asset-2e65be.s3.amazonaws.com</p>
<figure data-type="image" tabindex="6"><img src="https://littlebuzi.github.io//post-images/1573051669990.png" alt="" loading="lazy"></figure>
<pre><code class="language-linux">
wget https://github.com/rezoo/illustration2vec/releases/download/v2.0.0/illust2vec_tag_ver200.caffemodel

以此类推...

</code></pre>
<h2 id="法二">法二：</h2>
<p>修改hosts(window):</p>
<p>当我们需要本地调试网站或者屏蔽某个网站的时候可以手动将这个网站添加到系统hosts文件中，因为hosts文件的优先级高于DNS，所以可以达到你想要在浏览器里呈现的结果，当然这只在本地有用！<br>
一、Windows中hosts文件一般在C:\Windows\System32\drivers\etc目录下，格式是</p>
<pre><code>127.0.0.1 localhost
::1 localhost
52.216.186.155 github-production-release-asset-2e65be.s3.amazonaws.com
</code></pre>
<p>可以用记事本修改，前面是IP地址，后面是域名。127.0.0.1这个是本地环回地址。<br>
比如127.0.0.1 www.baidu.com就是把www.baidu.com这个域名指向127.0.0.1的地址。</p>
<h2 id="xftp传上去云端">xftp传上去云端</h2>
<p>当然这也需要很久 不多折合下来很大可能快50-100倍。如果像我一样有一台window云服务，那就让它来做这件事。下载，上传，都在云上进行。</p>
<h2 id="详细请看">详细请看</h2>
<p><a href="https://www.cmsky.com/linux-hosts/">https://www.cmsky.com/linux-hosts/</a></p>
<hr>
<h2 id="步骤22中可能遇到的问题">步骤2.2中可能遇到的问题：</h2>
<pre><code>
【Linux】 解决报错： 
ImportError: libSM.so.6: cannot open shared object file: No such file or directory

原因：
libSM、libSM等不存在

解决办法：
yum install xxx

详：https://www.cnblogs.com/richerdyoung/p/8458910.html

</code></pre>
<hr>
<h2 id="步骤23中可能遇到的问题">步骤2.3中可能遇到的问题：</h2>
<p>查看linux系统CPU和内存命令</p>
<p>https://jingyan.baidu.com/article/fdbd4277b16d1cb89e3f48e4.html</p>
<p>Python MemoryError</p>
<p>https://blog.csdn.net/xiaopihaierletian/article/details/57416110</p>
<p>在用Python处理大数据时，本来16G的内存，内存还没使用四分之一就开始报MemoryError的错误，后来才知道32bit的Python使用内存超过2G之后，就报这个错误，还没有其他的提示消息。果断换64bit的Python。</p>
<p>https://blog.csdn.net/weixin_33928137/article/details/93646975</p>
<p>https://blog.csdn.net/xovee/article/details/101077022</p>
<p>linux 使用文件增加虚拟内存 swap</p>
<p>https://msd.misuland.com/pd/3070888491219949990</p>
<p>https://www.cnblogs.com/ling-yu-amen/p/10819879.html</p>
<hr>
<br>
<p>问：博主你的代码有问题，你的项目文件夹怎么建的？<br>
答：项目还在开发中，这是俺滴毕设所以还未完善，只有个大概，望体谅<sub>谢谢大家</sub></p>
<p>工具：xftp、xshell：<a href="https://www.netsarang.com/zh/free-for-home-school/">https://www.netsarang.com/zh/free-for-home-school/</a></p>
<h1 id="参考文献">参考文献：</h1>
<p><a href="https://blog.csdn.net/abcd740181246/article/details/89878613">https://blog.csdn.net/abcd740181246/article/details/89878613</a></p>
<p><a href="https://blog.csdn.net/zyxhangiian123456789/article/details/87911999">https://blog.csdn.net/zyxhangiian123456789/article/details/87911999</a></p>
<p><a href="https://blog.csdn.net/qq_29007291/article/details/81103603">https://blog.csdn.net/qq_29007291/article/details/81103603</a></p>
<p><a href="https://blog.csdn.net/mozf881/article/details/84929443">https://blog.csdn.net/mozf881/article/details/84929443</a></p>
]]></content>
    </entry>
</feed>